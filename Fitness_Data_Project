---
title: "Analysis of Personal Fitness Data"
author: "Michael Brown"
date: "June 2015"
output: html_document
---
### Executive Summary
This study is to make fitness outcome predictions for 20 different test cases using machine learning techniques.  

### Data Conditioning
Data from http://groupware.les.inf.puc-rio.br/har was used to address the problem.  

Background

Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). 

**************

Data 

Six young health participants were asked to perform one set of 10 repetitions of the Unilateral Dumbbell Biceps Curl in five different fashions: 
Class A - exactly according to the specification 
Class B - throwing the elbows to the front 
Class C - lifting the dumbbell only halfway 
Class D - lowering the dumbbell only halfway 
Class E - throwing the hips to the front 

Read more: http://groupware.les.inf.puc-rio.br/har#ixzz3mrNWYdbQ

The training data for this project are available here: 

https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv

The test data are available here: 

https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
 
************************

```{r}

library(caret)
library(rattle)
require(RCurl)
retults <- NULL

train.csv <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
df.train.data <- read.csv(textConnection(train.csv))

test.csv <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
df.test.data <- as.data.frame(read.csv(textConnection(test.csv)))

```


### Data Exploration
```{r, echo=FALSE}

#summary(df.train.data)

```


### Data Condition
```{r, echo=FALSE}

### stopgap to import content from file
#df.train.data <- read.csv("~/Downloads/pml-training.csv")
#df.test.data <- read.csv("~/Downloads/pml-testing.csv")


###  Issue: testing data is sparse.  Need to remove fields with no data or NA.  Dont want to model with data not availible in testing set.  THus reduce test set to good data and overlay columns back onto training data

names.test.not_na <- !is.na(df.test.data[1,])  # list of data columns to keep without NAs
df.test.not_na <- df.test.data[,names.test.not_na]  # Reformed test df with just columns with data

names.df.test <- names(df.test.not_na[1,which(df.test.not_na[1,]!='')]) # list of data colums not empty
df.test.meta <- df.test.not_na[,names.df.test]

df.test <- df.test.meta[,8:60]  # remove metadata

# Remove columns from training that are not found in pre-processed test data (except classe)

train.names.keep <- is.element(names(df.train.data) , names(df.test))

df.train.match <- df.train.data[,train.names.keep]
df.train <- cbind(df.train.match , df.train.data[,'classe'])

colnames(df.train)[53] <- 'classe'

# clean up
remove(df.test.meta)
remove(names.df.test)
remove(df.test.not_na)
remove(names.test.not_na)
remove(df.train.match)
remove(test.csv)
remove(train.csv)

#names.train.keep <- !is.na(df.train.data[1,])  # remove meaningless columns
#df.train.na <- df.train.data[ , names.train.keep]

#not_null <- names(df.train.na[1,which(df.train.na[1,]!='')])  # remove columns with no data
#df.train.x <- df.train.na[,not_null] # remove row number and user as not usefull data
#df.train <- df.train.x[,c(-1, -2)]


```


### Model
```{r, echo=FALSE}

### Solution by RPART
# create model 
model_rpart <- train(classe~. , data = df.train , method="rpart" )
model_rpart$finalModel

# visualization
fancyRpartPlot(model_rpart$finalModel)

# prediction
predict.test.rpart <- predict(model_rpart , newdata = df.test.data )
predict.test.rpart

results <-  c('rpart' , as.character(predict.test.rpart))

#produce result files

n = length(predict.test.rpart)
  for(i in 1:n){
    filename = paste0("problem_id_",i,".txt")
    write.table(predict.test.rpart[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
    }
    
### Solution by Boost

#  Create model
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model_gbm <- train(classe~. , data = df.train , method="gmb" , trControl=control ,  verbose = FALSE )
model_gmb$finalModel

#  Visualization
fancyRpartPlot(model_gbm$finalModel)

#  Prediction 
predict.test.gbm <- predict(model_gbm , newdata = df.test )
predict.test.gbm

results <-  rbind( results , c('Boost' , as.character(predict.test.rpart)))

### Solution by Random Forest
# Model creation
model_rf <- train(classe~. , data = df.train , method="rf" )
model_rf$finalModel

# Visualization
fancyRpartPlot(model_rf$finalModel)

# Prediction
predict.test.rf <- predict(model , newdata = df.test )
predict.test.rf

results <- rbind(results , c('Random Forest' , as.character(predict.test.rf)))
```
